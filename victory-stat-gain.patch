diff --git a/creature_battler_bot.py b/creature_battler_bot.py
index 0000000..1111111 100644
--- a/creature_battler_bot.py
+++ b/creature_battler_bot.py
@@ -1,7 +1,7 @@
-from __future__ import annotations
+from __future__ import annotations
 import asyncio, json, logging, math, os, random, time
 from dataclasses import dataclass
 from typing import Any, Dict, List, Optional, Tuple
 
@@ -625,23 +625,70 @@ async def finalize_battle(inter: discord.Interaction, st: BattleState):
     player_won = st.opp_current_hp <= 0 and st.user_current_hp > 0
     win_cash, loss_cash = TIER_PAYOUTS[st.tier]
     payout = win_cash if player_won else loss_cash
     pool = await db_pool()
 
     await _ensure_record(st.user_id, st.creature_id, st.user_creature["name"])
     await _record_result(st.user_id, st.user_creature["name"], player_won)
 
     await pool.execute("UPDATE trainers SET cash = cash + $1 WHERE user_id=$2", payout, st.user_id)
     st.logs.append(f"You {'won' if player_won else 'lost'} the Tier {st.tier} battle: +{payout} cash awarded.")
 
-    if player_won:
+    if player_won:
         wins, unlocked_now = await _record_win_and_maybe_unlock(st.creature_id, st.tier)
         st.logs.append(f"Progress: Tier {st.tier} wins = {wins}/5.")
         if unlocked_now:
             st.logs.append(
                 f"üèÖ **Tier {st.tier} Glyph unlocked!**" +
                 (f" {st.user_creature['name']} may now battle **Tier {st.tier + 1}**." if st.tier < 9 else "")
             )
 
+        # ‚îÄ‚îÄ NEW: Victory stat gain (+1 random stat) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
+        # Only on win, and only for the surviving creature.
+        try:
+            # Choose a stat and apply +1 in memory first
+            gained_stat = random.choice(PRIMARY_STATS)
+            new_stats = dict(st.user_creature["stats"])  # shallow copy
+            new_stats[gained_stat] = int(new_stats.get(gained_stat, 0)) + 1
+
+            # Compute new HP values if HP increased
+            new_max_hp = int(new_stats["HP"]) * 5
+            # st.user_current_hp at this point is the final HP after battle rounds
+            new_cur_hp = st.user_current_hp
+            if gained_stat == "HP":
+                # On HP gain, increase current HP by +5 but cap at new max
+                new_cur_hp = min(st.user_current_hp + 5, new_max_hp)
+
+            # Persist to DB
+            await pool.execute(
+                "UPDATE creatures SET stats=$1, current_hp=$2 WHERE id=$3",
+                json.dumps(new_stats), new_cur_hp, st.creature_id
+            )
+
+            # Update in-memory snapshot so future logs/logic reflect the change
+            st.user_creature["stats"] = new_stats
+            st.user_max_hp = new_max_hp
+            st.user_current_hp = new_cur_hp
+
+            # Friendly log message
+            if gained_stat == "HP":
+                st.logs.append(
+                    f"‚ú® **{st.user_creature['name']}** gained **+1 HP** from the victory "
+                    f"(Max HP is now {new_max_hp}, current {new_cur_hp}/{new_max_hp})."
+                )
+            else:
+                st.logs.append(
+                    f"‚ú® **{st.user_creature['name']}** gained **+1 {gained_stat}** from the victory!"
+                )
+        except Exception as e:
+            logger.error("Failed to apply victory stat gain: %s", e)
+        # ‚îÄ‚îÄ End NEW ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
+
     if not player_won:
         death_roll = random.random()
         pct = int(death_roll * 100)
         if death_roll < 0.5:
             await _record_death(st.user_id, st.user_creature["name"])
             await pool.execute("DELETE FROM creatures WHERE id=$1", st.creature_id)
             st.logs.append(f"üíÄ Death roll {pct} (<50): **{st.user_creature['name']}** died (kept on leaderboard).")
         else:
             st.logs.append(f"üõ°Ô∏è Death roll {pct} (‚â•50): **{st.user_creature['name']}** survived the defeat.")
 
     asyncio.create_task(update_leaderboard_now(reason="battle_finalize"))
